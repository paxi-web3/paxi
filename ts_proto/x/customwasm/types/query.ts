// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: x/customwasm/types/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "x.customwasm.types";

export interface QueryParamsRequest {
}

export interface QueryParamsResponse {
  storeCodeBaseGas: Long;
  storeCodeMultiplier: Long;
  instBaseGas: Long;
  instMultiplier: Long;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return {
    storeCodeBaseGas: Long.UZERO,
    storeCodeMultiplier: Long.UZERO,
    instBaseGas: Long.UZERO,
    instMultiplier: Long.UZERO,
  };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.storeCodeBaseGas.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.storeCodeBaseGas.toString());
    }
    if (!message.storeCodeMultiplier.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.storeCodeMultiplier.toString());
    }
    if (!message.instBaseGas.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.instBaseGas.toString());
    }
    if (!message.instMultiplier.equals(Long.UZERO)) {
      writer.uint32(32).uint64(message.instMultiplier.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.storeCodeBaseGas = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.storeCodeMultiplier = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.instBaseGas = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.instMultiplier = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return {
      storeCodeBaseGas: isSet(object.storeCodeBaseGas) ? Long.fromValue(object.storeCodeBaseGas) : Long.UZERO,
      storeCodeMultiplier: isSet(object.storeCodeMultiplier) ? Long.fromValue(object.storeCodeMultiplier) : Long.UZERO,
      instBaseGas: isSet(object.instBaseGas) ? Long.fromValue(object.instBaseGas) : Long.UZERO,
      instMultiplier: isSet(object.instMultiplier) ? Long.fromValue(object.instMultiplier) : Long.UZERO,
    };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (!message.storeCodeBaseGas.equals(Long.UZERO)) {
      obj.storeCodeBaseGas = (message.storeCodeBaseGas || Long.UZERO).toString();
    }
    if (!message.storeCodeMultiplier.equals(Long.UZERO)) {
      obj.storeCodeMultiplier = (message.storeCodeMultiplier || Long.UZERO).toString();
    }
    if (!message.instBaseGas.equals(Long.UZERO)) {
      obj.instBaseGas = (message.instBaseGas || Long.UZERO).toString();
    }
    if (!message.instMultiplier.equals(Long.UZERO)) {
      obj.instMultiplier = (message.instMultiplier || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.storeCodeBaseGas = (object.storeCodeBaseGas !== undefined && object.storeCodeBaseGas !== null)
      ? Long.fromValue(object.storeCodeBaseGas)
      : Long.UZERO;
    message.storeCodeMultiplier = (object.storeCodeMultiplier !== undefined && object.storeCodeMultiplier !== null)
      ? Long.fromValue(object.storeCodeMultiplier)
      : Long.UZERO;
    message.instBaseGas = (object.instBaseGas !== undefined && object.instBaseGas !== null)
      ? Long.fromValue(object.instBaseGas)
      : Long.UZERO;
    message.instMultiplier = (object.instMultiplier !== undefined && object.instMultiplier !== null)
      ? Long.fromValue(object.instMultiplier)
      : Long.UZERO;
    return message;
  },
};

export interface Query {
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
}

export const QueryServiceName = "x.customwasm.types.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
