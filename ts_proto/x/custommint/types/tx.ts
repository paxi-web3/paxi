// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: x/custommint/types/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "x.custommint.types";

export interface ParamsInput {
  burnThreshold: string;
  burnRatio: string;
  blocksPerYear: Long;
  firstYearInflation: string;
  secondYearInflation: string;
  otherYearInflation: string;
}

export interface MsgUpdateParams {
  authority: string;
  params?: ParamsInput | undefined;
}

export interface MsgUpdateParamsResponse {
}

function createBaseParamsInput(): ParamsInput {
  return {
    burnThreshold: "",
    burnRatio: "",
    blocksPerYear: Long.ZERO,
    firstYearInflation: "",
    secondYearInflation: "",
    otherYearInflation: "",
  };
}

export const ParamsInput: MessageFns<ParamsInput> = {
  encode(message: ParamsInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.burnThreshold !== "") {
      writer.uint32(10).string(message.burnThreshold);
    }
    if (message.burnRatio !== "") {
      writer.uint32(18).string(message.burnRatio);
    }
    if (!message.blocksPerYear.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.blocksPerYear.toString());
    }
    if (message.firstYearInflation !== "") {
      writer.uint32(34).string(message.firstYearInflation);
    }
    if (message.secondYearInflation !== "") {
      writer.uint32(42).string(message.secondYearInflation);
    }
    if (message.otherYearInflation !== "") {
      writer.uint32(50).string(message.otherYearInflation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParamsInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParamsInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.burnThreshold = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.burnRatio = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.blocksPerYear = Long.fromString(reader.int64().toString());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.firstYearInflation = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.secondYearInflation = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.otherYearInflation = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParamsInput {
    return {
      burnThreshold: isSet(object.burnThreshold) ? globalThis.String(object.burnThreshold) : "",
      burnRatio: isSet(object.burnRatio) ? globalThis.String(object.burnRatio) : "",
      blocksPerYear: isSet(object.blocksPerYear) ? Long.fromValue(object.blocksPerYear) : Long.ZERO,
      firstYearInflation: isSet(object.firstYearInflation) ? globalThis.String(object.firstYearInflation) : "",
      secondYearInflation: isSet(object.secondYearInflation) ? globalThis.String(object.secondYearInflation) : "",
      otherYearInflation: isSet(object.otherYearInflation) ? globalThis.String(object.otherYearInflation) : "",
    };
  },

  toJSON(message: ParamsInput): unknown {
    const obj: any = {};
    if (message.burnThreshold !== "") {
      obj.burnThreshold = message.burnThreshold;
    }
    if (message.burnRatio !== "") {
      obj.burnRatio = message.burnRatio;
    }
    if (!message.blocksPerYear.equals(Long.ZERO)) {
      obj.blocksPerYear = (message.blocksPerYear || Long.ZERO).toString();
    }
    if (message.firstYearInflation !== "") {
      obj.firstYearInflation = message.firstYearInflation;
    }
    if (message.secondYearInflation !== "") {
      obj.secondYearInflation = message.secondYearInflation;
    }
    if (message.otherYearInflation !== "") {
      obj.otherYearInflation = message.otherYearInflation;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ParamsInput>, I>>(base?: I): ParamsInput {
    return ParamsInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParamsInput>, I>>(object: I): ParamsInput {
    const message = createBaseParamsInput();
    message.burnThreshold = object.burnThreshold ?? "";
    message.burnRatio = object.burnRatio ?? "";
    message.blocksPerYear = (object.blocksPerYear !== undefined && object.blocksPerYear !== null)
      ? Long.fromValue(object.blocksPerYear)
      : Long.ZERO;
    message.firstYearInflation = object.firstYearInflation ?? "";
    message.secondYearInflation = object.secondYearInflation ?? "";
    message.otherYearInflation = object.otherYearInflation ?? "";
    return message;
  },
};

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      ParamsInput.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = ParamsInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? ParamsInput.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = ParamsInput.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? ParamsInput.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

export interface Msg {
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
}

export const MsgServiceName = "x.custommint.types.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
