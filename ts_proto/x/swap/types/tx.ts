// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: x/swap/types/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "x.swap.types";

export interface ParamsInput {
  codeId: Long;
  swapFeeBps: Long;
  minLiquidity: Long;
}

export interface MsgUpdateParams {
  authority: string;
  params?: ParamsInput | undefined;
}

export interface MsgUpdateParamsResponse {
}

export interface MsgProvideLiquidity {
  creator: string;
  prc20: string;
  paxiAmount: string;
  prc20Amount: string;
}

export interface MsgProvideLiquidityResponse {
}

export interface MsgWithdrawLiquidity {
  creator: string;
  prc20: string;
  lpAmount: string;
}

export interface MsgWithdrawLiquidityResponse {
}

export interface MsgSwap {
  creator: string;
  prc20: string;
  /** "upaxi" or PRC20 contract address */
  offerDenom: string;
  /** string to support big.Int */
  offerAmount: string;
  /** slippage protection */
  minReceive: string;
}

export interface MsgSwapResponse {
}

function createBaseParamsInput(): ParamsInput {
  return { codeId: Long.UZERO, swapFeeBps: Long.UZERO, minLiquidity: Long.UZERO };
}

export const ParamsInput: MessageFns<ParamsInput> = {
  encode(message: ParamsInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.codeId.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.codeId.toString());
    }
    if (!message.swapFeeBps.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.swapFeeBps.toString());
    }
    if (!message.minLiquidity.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.minLiquidity.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParamsInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParamsInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.codeId = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.swapFeeBps = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.minLiquidity = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParamsInput {
    return {
      codeId: isSet(object.codeId) ? Long.fromValue(object.codeId) : Long.UZERO,
      swapFeeBps: isSet(object.swapFeeBps) ? Long.fromValue(object.swapFeeBps) : Long.UZERO,
      minLiquidity: isSet(object.minLiquidity) ? Long.fromValue(object.minLiquidity) : Long.UZERO,
    };
  },

  toJSON(message: ParamsInput): unknown {
    const obj: any = {};
    if (!message.codeId.equals(Long.UZERO)) {
      obj.codeId = (message.codeId || Long.UZERO).toString();
    }
    if (!message.swapFeeBps.equals(Long.UZERO)) {
      obj.swapFeeBps = (message.swapFeeBps || Long.UZERO).toString();
    }
    if (!message.minLiquidity.equals(Long.UZERO)) {
      obj.minLiquidity = (message.minLiquidity || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ParamsInput>, I>>(base?: I): ParamsInput {
    return ParamsInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParamsInput>, I>>(object: I): ParamsInput {
    const message = createBaseParamsInput();
    message.codeId = (object.codeId !== undefined && object.codeId !== null)
      ? Long.fromValue(object.codeId)
      : Long.UZERO;
    message.swapFeeBps = (object.swapFeeBps !== undefined && object.swapFeeBps !== null)
      ? Long.fromValue(object.swapFeeBps)
      : Long.UZERO;
    message.minLiquidity = (object.minLiquidity !== undefined && object.minLiquidity !== null)
      ? Long.fromValue(object.minLiquidity)
      : Long.UZERO;
    return message;
  },
};

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      ParamsInput.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = ParamsInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? ParamsInput.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = ParamsInput.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? ParamsInput.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgProvideLiquidity(): MsgProvideLiquidity {
  return { creator: "", prc20: "", paxiAmount: "", prc20Amount: "" };
}

export const MsgProvideLiquidity: MessageFns<MsgProvideLiquidity> = {
  encode(message: MsgProvideLiquidity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.prc20 !== "") {
      writer.uint32(18).string(message.prc20);
    }
    if (message.paxiAmount !== "") {
      writer.uint32(26).string(message.paxiAmount);
    }
    if (message.prc20Amount !== "") {
      writer.uint32(34).string(message.prc20Amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgProvideLiquidity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgProvideLiquidity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.prc20 = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.paxiAmount = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.prc20Amount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgProvideLiquidity {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      prc20: isSet(object.prc20) ? globalThis.String(object.prc20) : "",
      paxiAmount: isSet(object.paxiAmount) ? globalThis.String(object.paxiAmount) : "",
      prc20Amount: isSet(object.prc20Amount) ? globalThis.String(object.prc20Amount) : "",
    };
  },

  toJSON(message: MsgProvideLiquidity): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.prc20 !== "") {
      obj.prc20 = message.prc20;
    }
    if (message.paxiAmount !== "") {
      obj.paxiAmount = message.paxiAmount;
    }
    if (message.prc20Amount !== "") {
      obj.prc20Amount = message.prc20Amount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgProvideLiquidity>, I>>(base?: I): MsgProvideLiquidity {
    return MsgProvideLiquidity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgProvideLiquidity>, I>>(object: I): MsgProvideLiquidity {
    const message = createBaseMsgProvideLiquidity();
    message.creator = object.creator ?? "";
    message.prc20 = object.prc20 ?? "";
    message.paxiAmount = object.paxiAmount ?? "";
    message.prc20Amount = object.prc20Amount ?? "";
    return message;
  },
};

function createBaseMsgProvideLiquidityResponse(): MsgProvideLiquidityResponse {
  return {};
}

export const MsgProvideLiquidityResponse: MessageFns<MsgProvideLiquidityResponse> = {
  encode(_: MsgProvideLiquidityResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgProvideLiquidityResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgProvideLiquidityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgProvideLiquidityResponse {
    return {};
  },

  toJSON(_: MsgProvideLiquidityResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgProvideLiquidityResponse>, I>>(base?: I): MsgProvideLiquidityResponse {
    return MsgProvideLiquidityResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgProvideLiquidityResponse>, I>>(_: I): MsgProvideLiquidityResponse {
    const message = createBaseMsgProvideLiquidityResponse();
    return message;
  },
};

function createBaseMsgWithdrawLiquidity(): MsgWithdrawLiquidity {
  return { creator: "", prc20: "", lpAmount: "" };
}

export const MsgWithdrawLiquidity: MessageFns<MsgWithdrawLiquidity> = {
  encode(message: MsgWithdrawLiquidity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.prc20 !== "") {
      writer.uint32(18).string(message.prc20);
    }
    if (message.lpAmount !== "") {
      writer.uint32(26).string(message.lpAmount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgWithdrawLiquidity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgWithdrawLiquidity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.prc20 = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.lpAmount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgWithdrawLiquidity {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      prc20: isSet(object.prc20) ? globalThis.String(object.prc20) : "",
      lpAmount: isSet(object.lpAmount) ? globalThis.String(object.lpAmount) : "",
    };
  },

  toJSON(message: MsgWithdrawLiquidity): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.prc20 !== "") {
      obj.prc20 = message.prc20;
    }
    if (message.lpAmount !== "") {
      obj.lpAmount = message.lpAmount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgWithdrawLiquidity>, I>>(base?: I): MsgWithdrawLiquidity {
    return MsgWithdrawLiquidity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgWithdrawLiquidity>, I>>(object: I): MsgWithdrawLiquidity {
    const message = createBaseMsgWithdrawLiquidity();
    message.creator = object.creator ?? "";
    message.prc20 = object.prc20 ?? "";
    message.lpAmount = object.lpAmount ?? "";
    return message;
  },
};

function createBaseMsgWithdrawLiquidityResponse(): MsgWithdrawLiquidityResponse {
  return {};
}

export const MsgWithdrawLiquidityResponse: MessageFns<MsgWithdrawLiquidityResponse> = {
  encode(_: MsgWithdrawLiquidityResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgWithdrawLiquidityResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgWithdrawLiquidityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgWithdrawLiquidityResponse {
    return {};
  },

  toJSON(_: MsgWithdrawLiquidityResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgWithdrawLiquidityResponse>, I>>(base?: I): MsgWithdrawLiquidityResponse {
    return MsgWithdrawLiquidityResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgWithdrawLiquidityResponse>, I>>(_: I): MsgWithdrawLiquidityResponse {
    const message = createBaseMsgWithdrawLiquidityResponse();
    return message;
  },
};

function createBaseMsgSwap(): MsgSwap {
  return { creator: "", prc20: "", offerDenom: "", offerAmount: "", minReceive: "" };
}

export const MsgSwap: MessageFns<MsgSwap> = {
  encode(message: MsgSwap, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.prc20 !== "") {
      writer.uint32(18).string(message.prc20);
    }
    if (message.offerDenom !== "") {
      writer.uint32(26).string(message.offerDenom);
    }
    if (message.offerAmount !== "") {
      writer.uint32(34).string(message.offerAmount);
    }
    if (message.minReceive !== "") {
      writer.uint32(42).string(message.minReceive);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSwap {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSwap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.prc20 = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.offerDenom = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.offerAmount = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.minReceive = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSwap {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      prc20: isSet(object.prc20) ? globalThis.String(object.prc20) : "",
      offerDenom: isSet(object.offerDenom) ? globalThis.String(object.offerDenom) : "",
      offerAmount: isSet(object.offerAmount) ? globalThis.String(object.offerAmount) : "",
      minReceive: isSet(object.minReceive) ? globalThis.String(object.minReceive) : "",
    };
  },

  toJSON(message: MsgSwap): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.prc20 !== "") {
      obj.prc20 = message.prc20;
    }
    if (message.offerDenom !== "") {
      obj.offerDenom = message.offerDenom;
    }
    if (message.offerAmount !== "") {
      obj.offerAmount = message.offerAmount;
    }
    if (message.minReceive !== "") {
      obj.minReceive = message.minReceive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSwap>, I>>(base?: I): MsgSwap {
    return MsgSwap.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSwap>, I>>(object: I): MsgSwap {
    const message = createBaseMsgSwap();
    message.creator = object.creator ?? "";
    message.prc20 = object.prc20 ?? "";
    message.offerDenom = object.offerDenom ?? "";
    message.offerAmount = object.offerAmount ?? "";
    message.minReceive = object.minReceive ?? "";
    return message;
  },
};

function createBaseMsgSwapResponse(): MsgSwapResponse {
  return {};
}

export const MsgSwapResponse: MessageFns<MsgSwapResponse> = {
  encode(_: MsgSwapResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSwapResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSwapResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSwapResponse {
    return {};
  },

  toJSON(_: MsgSwapResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSwapResponse>, I>>(base?: I): MsgSwapResponse {
    return MsgSwapResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSwapResponse>, I>>(_: I): MsgSwapResponse {
    const message = createBaseMsgSwapResponse();
    return message;
  },
};

export interface Msg {
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  ProvideLiquidity(request: MsgProvideLiquidity): Promise<MsgProvideLiquidityResponse>;
  WithdrawLiquidity(request: MsgWithdrawLiquidity): Promise<MsgWithdrawLiquidityResponse>;
  Swap(request: MsgSwap): Promise<MsgSwapResponse>;
}

export const MsgServiceName = "x.swap.types.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.ProvideLiquidity = this.ProvideLiquidity.bind(this);
    this.WithdrawLiquidity = this.WithdrawLiquidity.bind(this);
    this.Swap = this.Swap.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }

  ProvideLiquidity(request: MsgProvideLiquidity): Promise<MsgProvideLiquidityResponse> {
    const data = MsgProvideLiquidity.encode(request).finish();
    const promise = this.rpc.request(this.service, "ProvideLiquidity", data);
    return promise.then((data) => MsgProvideLiquidityResponse.decode(new BinaryReader(data)));
  }

  WithdrawLiquidity(request: MsgWithdrawLiquidity): Promise<MsgWithdrawLiquidityResponse> {
    const data = MsgWithdrawLiquidity.encode(request).finish();
    const promise = this.rpc.request(this.service, "WithdrawLiquidity", data);
    return promise.then((data) => MsgWithdrawLiquidityResponse.decode(new BinaryReader(data)));
  }

  Swap(request: MsgSwap): Promise<MsgSwapResponse> {
    const data = MsgSwap.encode(request).finish();
    const promise = this.rpc.request(this.service, "Swap", data);
    return promise.then((data) => MsgSwapResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
