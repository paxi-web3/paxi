// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: x/swap/types/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";

export const protobufPackage = "x.swap.types";

export interface QueryParamsRequest {
}

export interface QueryParamsResponse {
  codeId: Long;
  swapFeeBps: Long;
  minLiquidity: Long;
}

export interface ProviderPosition {
  creator: string;
  prc20: string;
  lpAmount: string;
}

export interface QueryPositionRequest {
  creator: string;
  prc20: string;
}

export interface QueryPositionResponse {
  position?: ProviderPosition | undefined;
  expectedPaxi: string;
  expectedPrc20: string;
}

export interface QueryPoolRequest {
  prc20: string;
}

export interface QueryPoolResponse {
  prc20: string;
  reservePaxi: string;
  reservePrc20: string;
  pricePaxiPerPrc20: string;
  pricePrc20PerPaxi: string;
  totalShares: string;
}

export interface QueryAllPoolsRequest {
  pagination?: PageRequest | undefined;
}

export interface QueryAllPoolsResponse {
  pools: QueryPoolResponse[];
  pagination?: PageResponse | undefined;
}

export interface PoolProto {
  /** PRC20 contract address (Bech32) */
  prc20: string;
  /** PAXI reserve amount */
  reservePaxi: string;
  /** PRC20 reserve amount */
  reservePrc20: string;
  /** Total LP shares issued (as stringified integer) */
  totalShares: string;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { codeId: Long.UZERO, swapFeeBps: Long.UZERO, minLiquidity: Long.UZERO };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.codeId.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.codeId.toString());
    }
    if (!message.swapFeeBps.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.swapFeeBps.toString());
    }
    if (!message.minLiquidity.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.minLiquidity.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.codeId = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.swapFeeBps = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.minLiquidity = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return {
      codeId: isSet(object.codeId) ? Long.fromValue(object.codeId) : Long.UZERO,
      swapFeeBps: isSet(object.swapFeeBps) ? Long.fromValue(object.swapFeeBps) : Long.UZERO,
      minLiquidity: isSet(object.minLiquidity) ? Long.fromValue(object.minLiquidity) : Long.UZERO,
    };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (!message.codeId.equals(Long.UZERO)) {
      obj.codeId = (message.codeId || Long.UZERO).toString();
    }
    if (!message.swapFeeBps.equals(Long.UZERO)) {
      obj.swapFeeBps = (message.swapFeeBps || Long.UZERO).toString();
    }
    if (!message.minLiquidity.equals(Long.UZERO)) {
      obj.minLiquidity = (message.minLiquidity || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.codeId = (object.codeId !== undefined && object.codeId !== null)
      ? Long.fromValue(object.codeId)
      : Long.UZERO;
    message.swapFeeBps = (object.swapFeeBps !== undefined && object.swapFeeBps !== null)
      ? Long.fromValue(object.swapFeeBps)
      : Long.UZERO;
    message.minLiquidity = (object.minLiquidity !== undefined && object.minLiquidity !== null)
      ? Long.fromValue(object.minLiquidity)
      : Long.UZERO;
    return message;
  },
};

function createBaseProviderPosition(): ProviderPosition {
  return { creator: "", prc20: "", lpAmount: "" };
}

export const ProviderPosition: MessageFns<ProviderPosition> = {
  encode(message: ProviderPosition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.prc20 !== "") {
      writer.uint32(18).string(message.prc20);
    }
    if (message.lpAmount !== "") {
      writer.uint32(26).string(message.lpAmount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProviderPosition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProviderPosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.prc20 = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.lpAmount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProviderPosition {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      prc20: isSet(object.prc20) ? globalThis.String(object.prc20) : "",
      lpAmount: isSet(object.lpAmount) ? globalThis.String(object.lpAmount) : "",
    };
  },

  toJSON(message: ProviderPosition): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.prc20 !== "") {
      obj.prc20 = message.prc20;
    }
    if (message.lpAmount !== "") {
      obj.lpAmount = message.lpAmount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProviderPosition>, I>>(base?: I): ProviderPosition {
    return ProviderPosition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProviderPosition>, I>>(object: I): ProviderPosition {
    const message = createBaseProviderPosition();
    message.creator = object.creator ?? "";
    message.prc20 = object.prc20 ?? "";
    message.lpAmount = object.lpAmount ?? "";
    return message;
  },
};

function createBaseQueryPositionRequest(): QueryPositionRequest {
  return { creator: "", prc20: "" };
}

export const QueryPositionRequest: MessageFns<QueryPositionRequest> = {
  encode(message: QueryPositionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.prc20 !== "") {
      writer.uint32(18).string(message.prc20);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPositionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPositionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.prc20 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPositionRequest {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      prc20: isSet(object.prc20) ? globalThis.String(object.prc20) : "",
    };
  },

  toJSON(message: QueryPositionRequest): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.prc20 !== "") {
      obj.prc20 = message.prc20;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPositionRequest>, I>>(base?: I): QueryPositionRequest {
    return QueryPositionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPositionRequest>, I>>(object: I): QueryPositionRequest {
    const message = createBaseQueryPositionRequest();
    message.creator = object.creator ?? "";
    message.prc20 = object.prc20 ?? "";
    return message;
  },
};

function createBaseQueryPositionResponse(): QueryPositionResponse {
  return { position: undefined, expectedPaxi: "", expectedPrc20: "" };
}

export const QueryPositionResponse: MessageFns<QueryPositionResponse> = {
  encode(message: QueryPositionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.position !== undefined) {
      ProviderPosition.encode(message.position, writer.uint32(10).fork()).join();
    }
    if (message.expectedPaxi !== "") {
      writer.uint32(18).string(message.expectedPaxi);
    }
    if (message.expectedPrc20 !== "") {
      writer.uint32(26).string(message.expectedPrc20);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPositionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPositionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.position = ProviderPosition.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.expectedPaxi = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.expectedPrc20 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPositionResponse {
    return {
      position: isSet(object.position) ? ProviderPosition.fromJSON(object.position) : undefined,
      expectedPaxi: isSet(object.expectedPaxi) ? globalThis.String(object.expectedPaxi) : "",
      expectedPrc20: isSet(object.expectedPrc20) ? globalThis.String(object.expectedPrc20) : "",
    };
  },

  toJSON(message: QueryPositionResponse): unknown {
    const obj: any = {};
    if (message.position !== undefined) {
      obj.position = ProviderPosition.toJSON(message.position);
    }
    if (message.expectedPaxi !== "") {
      obj.expectedPaxi = message.expectedPaxi;
    }
    if (message.expectedPrc20 !== "") {
      obj.expectedPrc20 = message.expectedPrc20;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPositionResponse>, I>>(base?: I): QueryPositionResponse {
    return QueryPositionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPositionResponse>, I>>(object: I): QueryPositionResponse {
    const message = createBaseQueryPositionResponse();
    message.position = (object.position !== undefined && object.position !== null)
      ? ProviderPosition.fromPartial(object.position)
      : undefined;
    message.expectedPaxi = object.expectedPaxi ?? "";
    message.expectedPrc20 = object.expectedPrc20 ?? "";
    return message;
  },
};

function createBaseQueryPoolRequest(): QueryPoolRequest {
  return { prc20: "" };
}

export const QueryPoolRequest: MessageFns<QueryPoolRequest> = {
  encode(message: QueryPoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.prc20 !== "") {
      writer.uint32(10).string(message.prc20);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.prc20 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoolRequest {
    return { prc20: isSet(object.prc20) ? globalThis.String(object.prc20) : "" };
  },

  toJSON(message: QueryPoolRequest): unknown {
    const obj: any = {};
    if (message.prc20 !== "") {
      obj.prc20 = message.prc20;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPoolRequest>, I>>(base?: I): QueryPoolRequest {
    return QueryPoolRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPoolRequest>, I>>(object: I): QueryPoolRequest {
    const message = createBaseQueryPoolRequest();
    message.prc20 = object.prc20 ?? "";
    return message;
  },
};

function createBaseQueryPoolResponse(): QueryPoolResponse {
  return {
    prc20: "",
    reservePaxi: "",
    reservePrc20: "",
    pricePaxiPerPrc20: "",
    pricePrc20PerPaxi: "",
    totalShares: "",
  };
}

export const QueryPoolResponse: MessageFns<QueryPoolResponse> = {
  encode(message: QueryPoolResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.prc20 !== "") {
      writer.uint32(10).string(message.prc20);
    }
    if (message.reservePaxi !== "") {
      writer.uint32(18).string(message.reservePaxi);
    }
    if (message.reservePrc20 !== "") {
      writer.uint32(26).string(message.reservePrc20);
    }
    if (message.pricePaxiPerPrc20 !== "") {
      writer.uint32(34).string(message.pricePaxiPerPrc20);
    }
    if (message.pricePrc20PerPaxi !== "") {
      writer.uint32(42).string(message.pricePrc20PerPaxi);
    }
    if (message.totalShares !== "") {
      writer.uint32(50).string(message.totalShares);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPoolResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.prc20 = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reservePaxi = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reservePrc20 = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.pricePaxiPerPrc20 = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.pricePrc20PerPaxi = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.totalShares = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoolResponse {
    return {
      prc20: isSet(object.prc20) ? globalThis.String(object.prc20) : "",
      reservePaxi: isSet(object.reservePaxi) ? globalThis.String(object.reservePaxi) : "",
      reservePrc20: isSet(object.reservePrc20) ? globalThis.String(object.reservePrc20) : "",
      pricePaxiPerPrc20: isSet(object.pricePaxiPerPrc20) ? globalThis.String(object.pricePaxiPerPrc20) : "",
      pricePrc20PerPaxi: isSet(object.pricePrc20PerPaxi) ? globalThis.String(object.pricePrc20PerPaxi) : "",
      totalShares: isSet(object.totalShares) ? globalThis.String(object.totalShares) : "",
    };
  },

  toJSON(message: QueryPoolResponse): unknown {
    const obj: any = {};
    if (message.prc20 !== "") {
      obj.prc20 = message.prc20;
    }
    if (message.reservePaxi !== "") {
      obj.reservePaxi = message.reservePaxi;
    }
    if (message.reservePrc20 !== "") {
      obj.reservePrc20 = message.reservePrc20;
    }
    if (message.pricePaxiPerPrc20 !== "") {
      obj.pricePaxiPerPrc20 = message.pricePaxiPerPrc20;
    }
    if (message.pricePrc20PerPaxi !== "") {
      obj.pricePrc20PerPaxi = message.pricePrc20PerPaxi;
    }
    if (message.totalShares !== "") {
      obj.totalShares = message.totalShares;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPoolResponse>, I>>(base?: I): QueryPoolResponse {
    return QueryPoolResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPoolResponse>, I>>(object: I): QueryPoolResponse {
    const message = createBaseQueryPoolResponse();
    message.prc20 = object.prc20 ?? "";
    message.reservePaxi = object.reservePaxi ?? "";
    message.reservePrc20 = object.reservePrc20 ?? "";
    message.pricePaxiPerPrc20 = object.pricePaxiPerPrc20 ?? "";
    message.pricePrc20PerPaxi = object.pricePrc20PerPaxi ?? "";
    message.totalShares = object.totalShares ?? "";
    return message;
  },
};

function createBaseQueryAllPoolsRequest(): QueryAllPoolsRequest {
  return { pagination: undefined };
}

export const QueryAllPoolsRequest: MessageFns<QueryAllPoolsRequest> = {
  encode(message: QueryAllPoolsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllPoolsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllPoolsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllPoolsRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllPoolsRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllPoolsRequest>, I>>(base?: I): QueryAllPoolsRequest {
    return QueryAllPoolsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllPoolsRequest>, I>>(object: I): QueryAllPoolsRequest {
    const message = createBaseQueryAllPoolsRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllPoolsResponse(): QueryAllPoolsResponse {
  return { pools: [], pagination: undefined };
}

export const QueryAllPoolsResponse: MessageFns<QueryAllPoolsResponse> = {
  encode(message: QueryAllPoolsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.pools) {
      QueryPoolResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllPoolsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllPoolsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pools.push(QueryPoolResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllPoolsResponse {
    return {
      pools: globalThis.Array.isArray(object?.pools) ? object.pools.map((e: any) => QueryPoolResponse.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllPoolsResponse): unknown {
    const obj: any = {};
    if (message.pools?.length) {
      obj.pools = message.pools.map((e) => QueryPoolResponse.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllPoolsResponse>, I>>(base?: I): QueryAllPoolsResponse {
    return QueryAllPoolsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllPoolsResponse>, I>>(object: I): QueryAllPoolsResponse {
    const message = createBaseQueryAllPoolsResponse();
    message.pools = object.pools?.map((e) => QueryPoolResponse.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBasePoolProto(): PoolProto {
  return { prc20: "", reservePaxi: "", reservePrc20: "", totalShares: "" };
}

export const PoolProto: MessageFns<PoolProto> = {
  encode(message: PoolProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.prc20 !== "") {
      writer.uint32(10).string(message.prc20);
    }
    if (message.reservePaxi !== "") {
      writer.uint32(18).string(message.reservePaxi);
    }
    if (message.reservePrc20 !== "") {
      writer.uint32(26).string(message.reservePrc20);
    }
    if (message.totalShares !== "") {
      writer.uint32(34).string(message.totalShares);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PoolProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePoolProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.prc20 = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reservePaxi = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reservePrc20 = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.totalShares = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PoolProto {
    return {
      prc20: isSet(object.prc20) ? globalThis.String(object.prc20) : "",
      reservePaxi: isSet(object.reservePaxi) ? globalThis.String(object.reservePaxi) : "",
      reservePrc20: isSet(object.reservePrc20) ? globalThis.String(object.reservePrc20) : "",
      totalShares: isSet(object.totalShares) ? globalThis.String(object.totalShares) : "",
    };
  },

  toJSON(message: PoolProto): unknown {
    const obj: any = {};
    if (message.prc20 !== "") {
      obj.prc20 = message.prc20;
    }
    if (message.reservePaxi !== "") {
      obj.reservePaxi = message.reservePaxi;
    }
    if (message.reservePrc20 !== "") {
      obj.reservePrc20 = message.reservePrc20;
    }
    if (message.totalShares !== "") {
      obj.totalShares = message.totalShares;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PoolProto>, I>>(base?: I): PoolProto {
    return PoolProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PoolProto>, I>>(object: I): PoolProto {
    const message = createBasePoolProto();
    message.prc20 = object.prc20 ?? "";
    message.reservePaxi = object.reservePaxi ?? "";
    message.reservePrc20 = object.reservePrc20 ?? "";
    message.totalShares = object.totalShares ?? "";
    return message;
  },
};

export interface Query {
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  Position(request: QueryPositionRequest): Promise<QueryPositionResponse>;
  Pool(request: QueryPoolRequest): Promise<QueryPoolResponse>;
  AllPools(request: QueryAllPoolsRequest): Promise<QueryAllPoolsResponse>;
}

export const QueryServiceName = "x.swap.types.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.Position = this.Position.bind(this);
    this.Pool = this.Pool.bind(this);
    this.AllPools = this.AllPools.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  Position(request: QueryPositionRequest): Promise<QueryPositionResponse> {
    const data = QueryPositionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Position", data);
    return promise.then((data) => QueryPositionResponse.decode(new BinaryReader(data)));
  }

  Pool(request: QueryPoolRequest): Promise<QueryPoolResponse> {
    const data = QueryPoolRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Pool", data);
    return promise.then((data) => QueryPoolResponse.decode(new BinaryReader(data)));
  }

  AllPools(request: QueryAllPoolsRequest): Promise<QueryAllPoolsResponse> {
    const data = QueryAllPoolsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AllPools", data);
    return promise.then((data) => QueryAllPoolsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
