syntax = "proto3";
package x.swap.types;

import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/api/annotations.proto";

option go_package = "github.com/paxi-web3/paxi/x/swap/types";

service Query {
    rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
        option (google.api.http) = {
            get: "/paxi/swap/params"
        };
    }

    rpc Position(QueryPositionRequest) returns (QueryPositionResponse) {
        option (google.api.http).get = "/paxi/swap/position/{creator}/{prc20}";
    }

    rpc Pool(QueryPoolRequest) returns (QueryPoolResponse) {
        option (google.api.http).get = "/paxi/swap/pool/{prc20}";
    }

    rpc AllPools(QueryAllPoolsRequest) returns (QueryAllPoolsResponse) {
        option (google.api.http).get = "/paxi/swap/all_pools";
    }
}

message QueryParamsRequest {
}

message QueryParamsResponse {
    uint64 code_id = 1;
    uint64 swap_fee_bps = 2;
    uint64 min_liquidity = 3;
}

message ProviderPosition {
  string creator = 1;
  string prc20 = 2;
  string lp_amount = 3;
}

message QueryPositionRequest {
  string creator = 1;
  string prc20 = 2;
}

message QueryPositionResponse {
  ProviderPosition position = 1;
  string expected_paxi = 2;
  string expected_prc20 = 3;
}

message QueryPoolRequest {
  string prc20 = 1;
}

message QueryPoolResponse {
  string prc20 = 1;
  string reserve_paxi = 2;
  string reserve_prc20 = 3;
  string price_paxi_per_prc20 = 4;
  string price_prc20_per_paxi = 5;
  string total_shares = 6;
}

message QueryAllPoolsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPoolsResponse {
  repeated QueryPoolResponse pools = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message PoolProto {
  string prc20 = 1;          // PRC20 contract address (Bech32)
  string reserve_paxi = 2;   // PAXI reserve amount
  string reserve_prc20 = 3;  // PRC20 reserve amount
  string total_shares = 4;   // Total LP shares issued (as stringified integer)
}