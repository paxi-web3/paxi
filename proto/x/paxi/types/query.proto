syntax = "proto3";
package x.paxi.types;

import "cosmos/base/v1beta1/coin.proto";
import "google/api/annotations.proto";

option go_package = "github.com/paxi-web3/paxi/x/paxi/types;types";

service Query {
    rpc LockedVesting(QueryLockedVestingRequest) returns (QueryLockedVestingResponse) {
        option (google.api.http) = {
            get: "/paxi/paxi/locked_vesting"
        };
    }
    rpc CirculatingSupply(QueryCirculatingSupplyRequest) returns (QueryCirculatingSupplyResponse) {
        option (google.api.http) = {
            get: "/paxi/paxi/circulating_supply"
        };
    }
    rpc TotalSupply(QueryTotalSupplyRequest) returns (QueryTotalSupplyResponse) {
        option (google.api.http) = {
            get: "/paxi/paxi/total_supply"
        };
    }
    rpc EstimatedGasPrice(QueryEstimatedGasPriceRequest) returns (QueryEstimatedGasPriceResponse) {
        option (google.api.http) = {
            get: "/paxi/paxi/estimated_gas_price"
        };
    }
    rpc LastBlockGasUsed(QueryLastBlockGasUsedRequest) returns (QueryLastBlockGasUsedResponse) {
        option (google.api.http) = {
            get: "/paxi/paxi/last_block_gas_used"
        };
    }
}

message QueryLockedVestingRequest {}

message QueryLockedVestingResponse {
    cosmos.base.v1beta1.Coin amount = 1;
}

message QueryCirculatingSupplyRequest {}

message QueryCirculatingSupplyResponse {
    cosmos.base.v1beta1.Coin amount = 1;
}

message QueryTotalSupplyRequest {}

message QueryTotalSupplyResponse {
    cosmos.base.v1beta1.Coin amount = 1;
}

message QueryEstimatedGasPriceRequest {}

message QueryEstimatedGasPriceResponse {
    string gas_price = 1;
}

message QueryLastBlockGasUsedRequest {}

message QueryLastBlockGasUsedResponse {
    uint64 gas_used = 1;
}
